###########################################################
# Git-Tumblr Subcommands
###########################################################
git tumblr index [<filename>...]
	Adds file(s) to the post index.
	If no files are specified, adds all staged files to the index.

git tumblr add <filename> [<filename>...]
	Performs `git tumblr index` and then a `git add` of the corresponding files.

git tumblr remote add <remote-name> <base-hostname> <oauth-token>
git tumblr remote remove <remote-name>
git tumblr remote set-hostname <remote-name> <base-hostname>
git tumblr remote set-token <remote-name> <oauth-token>
	Add, remove, and modify tumblogs to sync with.

git tumblr fetch <remote-name>
	Pull down changes from a tumblog and merge with the current working copy.

git tumblr pull <remote-name>
	Performs `git tumblr fetch` and, if there are no merge conflicts, `git commit`.

git tumblr push <remote-name> <refspec>
	Synchronizes the given branch with the given tumblog.

git tumblr move <source-file> <destination-file>
	Performs a file move, then looks up source-file in the index and changes its path.
	When moving a post around in the repository file structure, use this command.
	Also remember to update any relative filepaths in @photo, @audio, or @video directives.



###########################################################
# Git-Tumblr Posts Index File Format
###########################################################
# id       timestamp   filepath
3507845453 1298665620  "My Post File.md"
-          1298665620  "My Pending Post.md"
# Posts that have not been synced yet have a dash for the ID. Unfortunately, this means that syncing new posts will result in a new Git commit.


###########################################################
# Git-Tumblr Fetch Locations File
###########################################################
Optionally, users may place a text file called git-tumblr-locations at the repository root.
It determines where objects will be placed when new objects are downloaded from a remote.
Each line begins with the object type - audio, video, photo, or post.
Following this is the post state - published, draft, queue, or private. To cover multiple states, separate by commas or use the wildcard *.
For posts, the next column is the post type. Again, one may separate by commas or use the wildcard character.
Finally, the path to the folder relative to the repository root.

TODO: Details for inferring post state from the location of files, and for automatically moving files when changed by fetch.

An example git-tumblr-locations:

photo	*								img/
audio	*								media/
video	*								media/
post	draft				*			drafts/
post	queue				*			queue/
post	private,published	video		published/video
post	private,published	audio		published/audio
post	private,published	photo		published/photo
post	private,published	text		published/text
post	private,published	quote		published/quote
post	private,published	link		published/link
post	private,published	chat		published/chat


###########################################################
# Operations and Internal Model
###########################################################
Treats post collection as hierarchy - first level is post state, second level is post type.
	e.g. published/text
	git-tumblr-locations file maps each location to a directory
	resources (photos, audio and video clips) are in similar hierarchy,
	  but are only operated on as corresponding post is operated on

All sync operations take place in 3 stages:
1) Existence sync, which compares the list of posts by ID, and performs CREATE and DELETE operations.
	configuration options can determine behaviors such as whether associated resources are deleted when a post is deleted.
2) Location sync, which compares state and type of the posts, and performs MOVE operations.
	note that a MOVE operation might also require an EDIT operation, to change the @type or @state directives
	associated resources will generally be moved as well
	if a resource is used by multiple posts, it may be duplicated or simply not moved, depending on configuration
3) Content sync, which compares post contents and metadata, and performs EDIT operations.
	editing of photo, video, and audio posts will create or delete resources
	so again there are configuration options to determine behavior in the case of resource deletion

Things get complicated when you consider all the edge cases here - since this is a small utility
that realistically nobody else is likely to use, perhaps I should simply have a fixed hierarchical
layout and only have default options - albeit design with extendability in mind.

###########################################################
# Git-Tumblr Directives (Metadata Language)
###########################################################

<!-- @type text -->
<!-- @type link http://www.example.com/full-link-URL -->

<!-- @state published -->

<!-- @title Spaces Before and after the text are ignored   -->

<!-- @slug my-post-slug -->

<!-- @tweet Tweet text if you have autotweet enabled. -->

<!-- @tags you, can have, multiple -->
<!-- @tags instances of the tag element -->
<!-- @tags or, you, can repeat tags -->

<!-- @photo http://www.example.com/path/to/my/photo.jpg http://www.example.com/optional/click-through/url -->
<!-- @photo relative/photo/path.jpg http://www.example.com/optional/click-through/url -->

<!-- @photo_layout 112 -->

<!-- @audio http://www.example.com/path/to/my/audio.mp3 -->
<!-- @audio my_audio_file.mp3 -->

<!-- @video http://www.example.com/path/to/my/video.mp3 -->
<!-- @video my_video_file.mp3 -->

<!-- @quote Lorem ipsum dolor sit amet. -->


###########################################################
# Internal API Design
###########################################################

enum PostState = { "published", "queued", "draft", "private" }
enum PostType = { "text", "quote", "link", "answer", "video", "audio", "photo", "chat" }

enum PostAttribute = state, type, title, slug, autotweet, ...

interface PostStore:
	get_ids() -> int[]
	get_posts() -> Post[]

interface Post:
	get_id() -> int
	get_attribute(PostAttribute) -> Attribute

interface AttributeEditor:
	compute_delta(Attribute source, Attribute destination) -> AttributeDelta
	apply_delta(Attribute target, AttributeDelta change) -> boolean
